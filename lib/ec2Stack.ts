import { Stack, StackProps, RemovalPolicy, aws_s3 as s3, } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as cdk from 'aws-cdk-lib';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as iam from 'aws-cdk-lib/aws-iam';

export class EC2Stack extends Stack {
  constructor(scope: Construct, id: string, props?: StackProps) {
    super(scope, id, props);

    // IAM Role to access EC2
    const instanceRole = new iam.Role(this, 'InstanceRole', {
      assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),
      managedPolicies: [
        iam.ManagedPolicy.fromAwsManagedPolicyName('AdministratorAccess'),
      ],
    });

    // Network setting for EC2
    const defaultVpc = ec2.Vpc.fromLookup(this, 'VPC', {
      isDefault: true,
    });

    const chatbotAppSecurityGroup = new ec2.SecurityGroup(this, 'chatbotAppSecurityGroup', {
      vpc: defaultVpc,
    });
    chatbotAppSecurityGroup.addIngressRule(
      ec2.Peer.anyIpv4(),
      ec2.Port.tcp(80),
      'httpIpv4',
    );
    chatbotAppSecurityGroup.addIngressRule(
      ec2.Peer.anyIpv4(),
      ec2.Port.tcp(22),
      'sshIpv4',
    );

    // set AMI
    const machineImage = ec2.MachineImage.fromSsmParameter(
      '/aws/service/canonical/ubuntu/server/focal/stable/current/amd64/hvm/ebs-gp2/ami-id'
    );
    
    // set User Data
    const userData = ec2.UserData.forLinux();
    userData.addCommands(
      `sudo apt-get update -y`,
      `sleep 15`,
      `sudo apt-get install ec2-instance-connect && sleep 15`,
      `sudo apt install -y git && sleep 10`,
      `sudo apt install -y python3-pip && sleep 20`,
      `sudo apt install -y python3.8-venv && sleep 20`,
      `cd /home/ubuntu && sudo git clone https://github.com/ottlseo/advanced-rag-workshop.git`,
      `sudo python3 -m venv --copies /home/ubuntu/my_env`,
      `sudo chown -R ubuntu:ubuntu /home/ubuntu/my_env`,
      `source /home/ubuntu/my_env/bin/activate`,
      `sleep 5`,
      `cd advanced-rag-workshop/application`,
      `pip3 install -r requirements.txt && sleep 420`, // Wait for 7 min
      `sudo sh -c "cat <<EOF > /etc/systemd/system/streamlit.service
      [Unit]
      Description=Streamlit App
      After=network.target

      [Service]
      User=ubuntu
      Environment='AWS_DEFAULT_REGION=us-west-2'
      WorkingDirectory=/home/ubuntu/advanced-rag-workshop/application
      ExecStartPre=/bin/bash -c 'sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8501'
      ExecStart=/bin/bash -c 'source /home/ubuntu/my_env/bin/activate && streamlit run streamlit.py --server.port 8501'
      Restart=always
      
      [Install]
      WantedBy=multi-user.target
      EOF"`,
      
      `sleep 20`,
      `sudo systemctl daemon-reload`,
      `sudo systemctl enable streamlit`,
      `sudo systemctl start streamlit`,
    );
    
    // EC2 instance
    const chatbotAppInstance = new ec2.Instance(this, 'chatbotAppInstance', {
      instanceType: new ec2.InstanceType('m5.large'),
      machineImage: machineImage,
      vpc: defaultVpc,
      securityGroup: chatbotAppSecurityGroup,
      role: instanceRole,
      userData: userData,
    });

    new cdk.CfnOutput(this, 'chatbotAppUrl', {
      value: `http://${chatbotAppInstance.instancePublicIp}/`,
      description: 'The URL of chatbot instance generated by AWS Advanced RAG Workshop',
      exportName: 'chatbotAppUrl',
    });
  }
}
